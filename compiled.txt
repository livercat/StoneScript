// adjust weapons and runtime settings below
// to suit your items and progress
// almost all weapons are optional, but you do
// need at least these set:
// ranged_2h, melee_main, default_sh
// ranged_main is required for Boos (in halls)

// some variable names are shorter
// than I would prefer for readability,
// but Mindstone has limit of 50 chars

// your weapons
var fire_sh = ""
var poison_sh = "poison shield ap + 4"
var ice_sh = ""
var aether_sh = ""
var vigor_sh = "vigor shield ah + 4"

var fire_1h = "fire sword dF + 4"
var poison_1h = "posion sword dP + 4"
var ice_1h = "ice sword dI +4"
var aether_1h = "aether sword D +4"
var vigor_1h = "vigor sword dL +4"

var fire_r = "fire wand D + 2"
var poison_r = "poison wand D + 2"
var ice_r = ""
var aether_r = ""
var vigor_r = ""

var ranged_2h = "repeating crossbow *9"
var bardiche = "bardiche *8"
var blade = "blade of the fallen god"
var arm = "skeleton arm"
var dashing = "dashing shield + 3"
var bashing = "bashing shield + 4"

var ranged_main = poison_r
var ranged_off = fire_r
var melee_main = vigor_1h
var melee_off = fire_1h
var default_sh = vigor_sh
var melee_aoe = ""

// runtime settings
var arm_damage = 32 // depends on *
var pickpocket = "pick_pocket:2" // depends on *
var chill = "❄:debuff_chill:6:" // depends on spd

// internal use
var _main_hand = "" // weapon switching
var _naga = 0 // nagaraja fight
var _cache = [] // debug use
var _good = [] // current buffs
var _bad = [] // current debuffs
var _stu = [] // unknown status effects
var _ignore_st = [
  "quarterstaff_buff_attack_speed",
  "quarterstaff_buff_stun",
  "bardiche_buff_aoe_chance",
  "bardiche_buff_crit_chance",
  "bardiche_buff_crit_mult",
  "bardiche_buff_move_speed",
]
var _statuses = [["smite", "Smite", "+"], 
^["pick_pocket", "Pickpocket", "+"],
^["vampiric", "Vampiric", "+"],
^["lucky_crit_multi", "Lucky", "+"],
^["debuff_damage", "DmgDown!", "-"],
^["debuff_yeti_chill", "AtkSlow", "-"],
^["debuff_duration_damage", "DmgDown", "-"],
^["debuff_move_speed", "MoveSlow", "-"],
^["debuff_chill", "Chill", "-"],
^["stun", "Stun", "-"]]
// poor man's hashmap
var _status_uids = _fill_status_uids()

var poison_debuff = "debuff_duration_damage"
var dmg_debuff = "debuff_damage"
var mindCD = 0
var staffCD = 0
var bashCD = 0
var dashCD = 0
var armCD = 0
var hammerCD = 0
var bladeCD = 0
var bardCD = 0
var dasher = 0
var poison_stacks = 0

// updated each frame
mindCD = item.GetCooldown("mind")
staffCD = item.GetCooldown("quarterstaff")
bashCD = item.GetCooldown("bash")
dashCD = item.GetCooldown("dash")
armCD = item.GetCooldown("skeleton_arm")
hammerCD = item.GetCooldown("hammer")
bladeCD = item.GetCooldown("blade")
bardCD = item.GetCooldown("bardiche")

func _fill_status_uids()
  var uids = []
  for info : _statuses
    uids.Add(info[0])
  return uids

func some(s)
  return ! string.Equals(s, "")

func adjust_damage(dmg)
  ?poison_stacks = 0
    return dmg
  return int.Parse(dmg) - poison_stacks

func print_statuses()
  _good.Clear()
  _bad.Clear()
  poison_stacks = 0
  for s : [buffs.string, debuffs.string]
    // format: *:name:count:duration,...
    var splt = string.Split(s, ":", ",", false)
    ?splt.Count() > 0
      // we only need names
      for i = 1 .. splt.Count() - 3
        var st_uid = splt[i]
        ?string.Equals(st_uid, poison_debuff) |
        ^string.Equals(st_uid, dmg_debuff)
          poison_stacks = int.Parse(splt[i+1])
        var idx = _status_uids.IndexOf(st_uid)
        ?idx ! -1
          var info = _statuses[idx]
          var st = string.Format("{0}({1})",
          ^info[1], splt[i+1])
          ?info[2] = "+"
            _good.Add(st)
          :
            _bad.Add(st)
        :?_ignore_st.IndexOf(st_uid) = -1 &
        ^_stu.IndexOf(st_uid) = -1
          _stu.Add(st_uid)
        i = i + 3
  >`1,22,+ @string.Join(", ", _good)@
  >`1,23,- @string.Join(", ", _bad)@
  >`1,24,? @string.Join(", ", _stu)@

func draw_hud(show_foe)
  print_statuses()
  // cooldowns
  >`1,6,#@colorize(mindCD, false)@,Mind 
  ^@time.FormatDigital(mindCD)@
  >`1,7,#@colorize(hammerCD, 
  ^should_hammer())@,Hammer 
  ^@time.FormatDigital(hammerCD)@
  >`1,8,#@colorize(bardCD, 
  ^should_bardiche())@,Bard 
  ^@time.FormatDigital(bardCD)@
  >`1,9,#@colorize(bladeCD, 
  ^should_smite())@,Blade 
  ^@time.FormatDigital(bladeCD)@
  >`1,10,#@colorize(armCD, 
  ^should_slap())@,Arm 
  ^@time.FormatDigital(armCD)@

  ?show_foe
    >`1,25,~@foe@
    ?foe
      >`1,@16@,Count: @foe.count@
      >`1,@17@,@foe.name@
      >`1,@18@,Foe DMG: @foe.damage@
      >`1,@19@,Foe State: @foe.state@
      >`1,@20@,Foe Distance: @foe.distance@
    :
      return

func colorize(cd, cond)
  ?cd <= 0
    ?cond
      return "blue"
    return "green"
  return "red"

func can_activate()
  return item.CanActivate() & ai.enabled

func healwalk()
  ?foe.distance < 25 & hp < (maxhp / 4) &
  ^(item.potion = "healing" | 
  ^item.potion = "vampiric")
    activate potion
  ?foe & foe.distance < 23
    return false
  ?pickup.distance < 8
    equipL star
    equipR triskelion
  :
    ?staffCD <= 0 &
    ^can_activate()
      equip quarterstaff
      ?item.CanActivate("quarterstaff")
        activate R
    :
      ?hp < maxhp
        equipL ouroboros
      :
        equipL triskelion
      shield()
  return true

func dash()
  ?foe.distance > 5 & 
  ^can_activate() &
  // don't dash into ray
  ^(foe!dysangelos_perfected|foe.state!115)
    ?bashCD <= 0 & foe ! immune_to_stun
      return bashing
    :?dashCD <= 0
      return dashing
  return false

func mind_dodge()
  equipL mind
  shield()

func shield()
  ?hp < (maxhp / 2) & some(vigor_sh)
    equipR @vigor_sh@
  :?foe = aether & some(vigor_sh)
    equipR @vigor_sh@
  :?foe = fire & some(aether_sh)
    equipR @aether_sh@
  :?foe = ice & some(fire_sh)
    equipR @fire_sh@
  :?foe = poison & some(ice_sh)
    equipR @ice_sh@
  :?foe = vigor & some(poison_sh)
    equipR @poison_sh@
  :?some(default_sh)
    equipR @default_sh@
  :
    >bad shield equipped, 
    ^configure better weapons
    equipR shield

func main_hand(weapon)
  _main_hand = weapon
  equipL @weapon@
  return true

// modes: "dps", "def"
func offhand(mode)
  dasher = dash()
  ?dasher ! false
    equipR @dasher@
  :?mode = "dps"
    ?_main_hand = melee_main
      equipR @melee_off@
    :
      equipR @melee_main@
  :?mode = "def"
    shield()
  return true

// modes: "dps", "def"
func melee(mode)
  _main_hand = ""
  ?use_abilities()
    return
  :?hp < (maxhp / 2) & some(vigor_1h)
    main_hand(vigor_1h)
  :?foe = aether & some(vigor_1h)
    main_hand(vigor_1h)
  :?foe = fire & some(aether_1h)
    main_hand(aether_1h)
  :?foe = ice & some(fire_1h)
    main_hand(fire_1h)
  :?foe = poison & some(ice_1h)
    main_hand(ice_1h)
  :?foe = vigor & some(poison_1h)
    main_hand(poison_1h)
  :?some(melee_main)
    main_hand(melee_main)
  :
    >bad sword equipped, 
    ^configure better weapons
    main_hand("sword")
  offhand(mode)

func debuff(mode)
  ?foe.buffs.string = "buff_protection" |
  ^foe.buffs.string = "poena_mirror"
    return false
  ?foe.debuffs.string ! "∞:debuff_damage:1:" &
  ^ foe ! immune_to_debuff_damage
    return main_hand(poison_1h) & offhand(mode)
  :?foe.debuffs.string ! "φ:debuff_dot:1:" &
  ^foe ! immune_to_debuff_dot
    return main_hand(fire_1h) & offhand(mode)
  :?foe.debuffs.string ! chill &
  ^foe ! immune_to_debuff_chill
    return main_hand(ice_1h) & offhand(mode)
  return false

func ranged_offhand()
  ?_main_hand = ranged_main
    equipR @ranged_off@
  :
    equipR @ranged_main@

func ranged()
  _main_hand = ""
  ?foe ! immune_to_physical &
  ^foe.count < 5
    equip @ranged_2h@
    return
  :?foe = aether & some(vigor_r)
    main_hand(vigor_r)
  :?foe = fire & some(aether_r)
    main_hand(aether_r)
  :?foe = ice & some(fire_r)
    main_hand(fire_r)
  :?foe = poison & some(ice_r)
    main_hand(ice_r)
  :?foe = vigor & some(poison_r)
    main_hand(poison_r)
  :?some(ranged_main)
    main_hand(ranged_main)
  :
    >bad ranged equipped, 
    ^configure better weapons
    main_hand("wand")
  ranged_offhand()

func aoe()
  ?some(melee_aoe) &
  ^foe ! immune_to_physical
    equip @melee_aoe@
  ranged()

func aac(weapon)
  // animation attack cancelling:
  // equipping a different weapon
  // right after the attack cancels
  // the backswing animation,
  // effectively increasing your
  // attack speed
  ?ai.idle
    equip wand
  equip @weapon@
  return true

func should_slap()
  ?foe.distance > 6
    return false
  ?buffs.string ! pickpocket
    return true
  ?armCD > 0 |
  ^foe = pallas | // immune
  ^!can_activate()
    return false
  return (foe.armor + foe.hp) <=
  ^adjust_damage(arm_damage)

func slap()
  aac(arm)
  ?item.CanActivate("skeleton_arm") &
  ^buffs.string = pickpocket
    activate R
  return true

func should_smite()
  ?bladeCD > 0 |
  ^foe = pallas | // immune
  ^!can_activate() |
  ^foe.distance > 11
    return false
  return foe.count >= 7 | foe = boss

func smite()
  aac(blade)
  ?item.CanActivate("blade")
    activate R
  return true

func hammerOK()
  return hammerCD <= 0 | hammerCD >= 647

func should_hammer()
  ?!hammerOK() |
  ^foe ! boss |
  ^!can_activate() |
  ^foe.armor <= 0 |
  ^foe.distance > 7 |
  ^(foe=dysangelos_perfected & foe.state<107)
    // delay hammering until shield animation ends
    return false
  return true

func hammer()
  equip heavy hammer // aac doesn't work for it
  ?item.CanActivate("hammer")
    activate R
  return true

func bardicheOK()
  return bardCD <= 0 | bardCD >= 870

func should_bardiche()
  ?!bardicheOK() |
  ^!can_activate() |
  ^foe.distance > 9 |
  ^(foe ! boss & foe.count < 5)
    return false
  return bardicheOK()

func bardiche()
  aac(bardiche)
  ?item.CanActivate("bardiche")
    activate R
  return true

func use_abilities()
  ?should_smite()
    return smite()
  ?should_slap()
    return slap()
  ?should_bardiche()
    return bardiche()
  ?should_hammer()
    return hammer()
  return false

// modes: "dps", "def"
func fight(mode)
  // xbow range
  ?foe.distance <= 22 & foe.distance > 7
    ?foe = immune_to_ranged |
    ^foe = mine_walker // outranges xbow
      melee(mode)
    :
      ranged()
  // melee range
  :?foe = explode & foe.distance < 5
    mind_dodge()
  :?foe = immune_to_physical
    ranged()
  :?foe.count >= 4 & hp > (maxhp / 2)
    aoe()
  :
    melee(mode)

func fight_boss(mode)
  ?!use_abilities()
    ?!debuff(mode)
      melee(mode)
  
func progress()
  ?healwalk()
    return true
  ?foe ! boss
    return fight("def")

  // only bosses below

  ?loc = Rocky
    ?foe = dysangelos_elementalist
      // debuffing is risky in phase 2
      ?!use_abilities()
        melee("dps")
    :?foe = dysangelos_perfected
      ?foe.state = 115 & foe.time = 60
        // dodge the orb ray
        mind_dodge()
      :
        fight_boss("dps")
    :
      fight_boss("def")
  :?loc = deadwood
    ?foe ! poena
      return fight_boss("def")
    ?mindCD <= 0 & foe.distance < 23 & 
    ^foe.state = 32 & foe.time > 37
      mind_dodge()
    :
      fight_boss("def")
  :?loc = caves
    ?should_bardiche()
      bardiche()
    :?should_smite()
      smite()
    :
      ?foe.distance < 11
        ?mindCD <= 0
          mind_dodge()
        :
          fight_boss("def")
      :
        ranged()
  :?loc = fungus_forest_boss
    fight_boss("def")
  :?loc = undead_crypt_boss
    ?foe.count > 4
      aoe()
    :
      fight_boss("def")
  :?loc = bronze_guardian
    ?foe.state = 32 & foe.time = 22
      mind_dodge()
    :?foe.state = 33
      // hammer is down
      melee("dps")
    :?foe.distance > 15 & foe.state = 2
      ranged()
  :?loc = icy_ridge
    ?foe.armor > 0
      melee("dps")
    :?foe.state = 133
      ranged()
    :?loc.stars <= 5
      ?foe.distance <= 2
        // don't bother debuffing
        fight("dps")
      :?foe.distance <= 5
        // The shovel has an attack range of 1
        // so at white stars we can avoid
        // snowballs by getting close to boss.
        // on higher stars he blows you away
        // immediately
        equip shovel
      : // blown away
        fight("def")
    :
      ?foe ! hrímnir
        aoe() // ice wall
      :?foe.state = 133
        ranged()
      :
        fight_boss("dps")
  :?loc = nagaraja
    fight_nagajara()
  :
    fight_boss("def")

func detect_poison(pos_x, pos_y)
  >`0,0,x=@x@, y=@y@
  for px = pos_x .. pos_x+10
    for py = pos_y-6 .. pos_y
      ?draw.GetSymbol(px, py) = "("
        _cache.Add([pos_x, pos_y, px, py])
  var count = _cache.Count()
  ?count > 0
    for line = 1 .. count
      var v = _cache[line-1]
      >`0,@line@,x=@v[0]@, y=@v[1]@, 
      ^px=@v[2]@, py=@v[3]@;

func is_poison_near(pos_x, pos_y)
  // long and mid range
  ?draw.GetSymbol(pos_x+2, pos_y-6) = "(" |
  // melee
  ^(draw.GetSymbol(pos_x+1, pos_y-6) = "(")
    return true
  return false

func fight_nagajara()
  // goal is to dodge poison balls
  var x = screen.FromWorldX(pos.x)
  var y = screen.FromWorldZ(pos.z)
  // detect_poison(x, y)
  ?is_poison_near(x, y)
    _naga++

  ?_naga = 0
    // start at the xbow range
    ranged()
  :?_naga = 1
    // staff 1st poison
    equip quarterstaff
    activate R
    _naga++
  :?_naga = 2
    // and continue to shoot
    ranged()
  :?_naga = 3
    // dash into melee
    fight_boss("dps")
  :?_naga >= 4
    ?mindCD <= 0
      // dodge back and repeat
      mind_dodge()
      _naga = 0
    :
      // mind stone on CD, try to def
      fight_boss("def")

func brew_pot()
  ?loc = caves
    brew stone + bronze
  :
    brew tar + bronze

func reset_loop()
  _main_hand = ""
  _naga = 0
  _cache.Clear()
  _stu.Clear()

?loc.begin & item.potion = empty
  brew_pot()
?loc.loop
  reset_loop()

draw_hud(true)
progress()